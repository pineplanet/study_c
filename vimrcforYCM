call plug#begin('~/.vim/plugged')

Plug 'ctrlpvim/ctrlp.vim'
Plug 'SirVer/ultisnips'
Plug 'honza/vim-snippets'
Plug 'vim-airline/vim-airline'
Plug 'vim-airline/vim-airline-themes'
Plug 'airblade/vim-gitgutter'
Plug 'tpope/vim-fugitive'
"Plug 'Valloric/YouCompleteMe'
"Plug 'ajh17/vimcompletesme'
Plug 'skywind3000/vim-auto-popmenu'
Plug 'skywind3000/vim-dict'

Plug 'rdnetto/YCM-Generator', { 'branch': 'stable' }
Plug 'flazz/vim-colorschemes'
Plug 'tomasr/molokai'

Plug 'majutsushi/tagbar'
Plug 'jiangmiao/auto-pairs'
Plug 'mattn/emmet-vim'
Plug 'tpope/vim-surround'
Plug 'scrooloose/nerdcommenter'
Plug 'ntpeters/vim-better-whitespace'
Plug 'terryma/vim-multiple-cursors'
Plug 'ronakg/quickr-cscope.vim'
Plug 'junegunn/vim-easy-align'
Plug 'derekwyatt/vim-fswitch'
Plug 'wellle/targets.vim'

Plug 'pbondoer/vim-42header'
call plug#end()

syntax on
set shiftwidth=4
set tabstop=4
set t_Co=256
set number                     " show line number
"set relativenumber             " show relative line number
set cursorline                 " show cursor line
set cindent                    " according the C indenting rules
set autoindent                 " Copy indent from current line when starting a new line in insert mode
set smartindent                " When starting a new line '{', 'cinwords' '}'
set cino=(0,:0,t0              " Indent options
set enc=utf-8                  " Encoding vim inside
set fenc=utf-8                 " File encoding
set nocompatible               " Vi-compatible
set backspace=indent,eol,start " Backspace erase option
set hlsearch                   " Highlight all search pattern
set incsearch                  " While typing a search command, show where the pattern
set diffopt=vertical
set wildmenu                   " show wildmenu
set wildmode=list:longest,full " wildmenu option
set path+=./**
set list                       " show tabs endlie, blank
set listchars=tab:→\ ,extends:›,precedes:‹,nbsp:·,trail:·
set showbreak=\\               " [bonus]
set visualbell
set laststatus=2
set hidden                     " When off a buffer is unloaded when it is abandoned
set splitright
set splitbelow
set smarttab

" Color scheme
colorscheme molokai
hi MatchParen ctermfg=208 ctermbg=233 cterm=bold

augroup ctype
        autocmd!
        autocmd BufRead,BufNewFile *.h,*.c set filetype=c
augroup END

augroup filetype_c_cpp
        autocmd!
        autocmd FileType c,cpp setl ts=4 sw=4 sts=4
        autocmd FileType c,cpp :TagbarOpen
augroup END

augroup filetype_quickfix
        autocmd!
        autocmd FileType qf setl nonumber norelativenumber nocursorline
augroup END

augroup open_lastread
        autocmd!
        autocmd BufReadPost *
                \ if line("'\"") > 0 && line("'\"") <= line("$") |
                \   exe "normal g`\"" |
                \ endif
augroup END

" Make command
command -nargs=* Make wa | make <args> | cwindow 3

nnoremap <F5> :Make<CR>
nnoremap <F6> :Make check<CR>

let g:ycm_confirm_extra_conf           = 0
let g:ycm_auto_trigger                 = 1
let g:ycm_key_list_select_completion   = ['<C-j>', '<Down>']
let g:ycm_key_list_previous_completion = ['<C-k>', '<Up>']
let g:ycm_autoclose_preview_window_after_completion = 1

nnoremap <leader>gl :YcmCompleter GoToDeclaration <CR>
nnoremap <leader>gf :YcmCompleter GoToDefinition <CR>
nnoremap <leader>gg :YcmCompleter GoToDefinitionElseDeclaration <CR>

let g:UltiSnipsListSnippets        = "<C-g><Tab>"
let g:UltiSnipsExpandTrigger       = "<Tab>"
let g:UltiSnipsJumpForwardTrigger  = "<Tab>"
let g:UltiSnipsJumpBackwardTrigger = "<S-Tab>"
let g:UltiSnipsSnippetDirectories  = ['~/.vim/UltiSnips', 'UltiSnips']
let g:UltiSnipsEditSplit           = "vertical"

set wildignore+=*/tmp/*,*.so,*.swp,*.zip     " MacOSX/Linux
set wildignore+=*\\tmp\\*,*.swp,*.zip,*.exe  " Windows

let g:ctrlp_custom_ignore = {
        \ 'dir':  '\v[\/]\.(git|hg|svn)$',
        \ 'file': '\v\.(exe|so|dll)$',
        \ 'link': 'some_bad_symbolic_links',
\ }

let g:ctrlp_user_command = ['.git', 'cd %s && git ls-files -co --exclude-standard']

let g:airline#extensions#tabline#enabled = 1
let g:airline#extensions#tabline#buffer_nr_show = 1
let g:airline#extensions#tabline#formatter = 'unique_tail'
let g:airline_theme='molokai'
let g:airline_powerline_fonts = 1

let g:NERDSpaceDelims = 1
let g:NERDCompactSexyComs = 1
let g:NERDDefaultAlign = 'left'
let g:NERDCommentEmptyLines = 1
let g:NERDTrimTrailingWhitespace = 1
let g:NERDToggleCheckAllLines = 1
let g:NERDCreateDefaultMappings = 0
let g:NERDCustomDelimiters = {
        \ 'c': { 'leftAlt': '/*', 'rightAlt': '*/', 'left': '//' },
        \ 'cpp': { 'leftAlt': '/*', 'rightAlt': '*/', 'left': '//' }
\ }

nmap <Leader>; <plug>NERDCommenterToggle
vmap <Leader>; <plug>NERDCommenterToggle gv

function! LoadCscope()
        let db = findfile("cscope.out", ".;")
        if (!empty(db))
                let path = strpart(db, 0, match(db, "/cscope.out$"))
                set nocscopeverbose " suppress 'duplicate connection' error
                exe "cs add " . db . " " . path
                set cscopeverbose
                " else add the database pointed to by environment variable
        elseif $CSCOPE_DB != ""
                cs add $CSCOPE_DB
        endif
endfunction
au BufEnter /* call LoadCscope()

" Open QF when multiple matches.
let g:quickr_cscope_keymaps = 0

nmap <leader>cs <plug>(quickr_cscope_symbols)
nmap <leader>cg <plug>(quickr_cscope_global)
nmap <leader>cc <plug>(quickr_cscope_callers)
nmap <leader>cf <plug>(quickr_cscope_files)
nmap <leader>ci <plug>(quickr_cscope_includes)
nmap <leader>ct <plug>(quickr_cscope_text)
nmap <leader>ce <plug>(quickr_cscope_egrep)
nmap <leader>cd <plug>(quickr_cscope_functions)
nmap <leader>ca <plug>(quickr_cscope_assignments)

let g:AutoPairsFlyMode = 0
let g:AutoPairsShortcutBackInsert = '<M-b>'
imap <C-L> <Esc>A;<Esc>

" 42 header 
let g:hdr42user = 'ggul_jam'"'인트라아이디'
let g:hdr42mail = 'ggul_jam@icloud.com'"'인트라아이디@student.42seoul.kr'


" VCM
autocmd FileType vim let b:vcm_tab_complete = 'vim'

" vim-auto-popmenu
" enable this plugin for filetypes, '*' for all files.
let g:apc_enable_ft = {'text':1, 'markdown':1, 'php':1}

" source for dictionary, current or other loaded buffers, see ':help cpt'
set cpt=.,k,w,b

" don't select the first item.
set completeopt=menu,menuone,noselect

" suppress annoy messages.
set shortmess+=c
